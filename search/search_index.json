{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing Phantasm","text":"<p>Thank you for considering using Phantasm. Phantasm is a simple human-in-the-loop (HITL) approval layer for AI agents. With Phantasm, you can build and deploy AI agents that can execute critical business tasks safely.</p> <p>Most of the information you need to get started can be found in the Repository. This documentation, instead, will focus on explaining the details and concepts in the project. If you have any questions or need help, please feel free to reach out to us on Discord.</p>"},{"location":"#components","title":"Components","text":"<p>Phantasm consists of 3 main components: Client, Server, and Dashboard.</p>"},{"location":"#server","title":"Server","text":"<p>The server is the primary component that connects the client and the dashboard. The server responsible for receiving the approval requests from the client is called the Receiver Server and the server responsible for coordinating the approval requests with the dashboard is called the Coordinator Server.</p> <p>The Receiver Server uses gRPC while the Coordinator Server uses WebSocket protocol. Both servers are written in Rust and are controlled by Phantasm's CLI. If you're using Docker, this CLI is already the primary entry point for the image.</p>"},{"location":"#client","title":"Client","text":"<p>The client is a language-specific library that you can use to connect your AI agent to the Receiver Server. The core concept of the client is to send an approval request to the server before your AI agent executes a certain function and waits for approval from the approvers.</p>"},{"location":"#dashboard","title":"Dashboard","text":"<p>Phantasm comes with a web-based dashboard that you can use to connect to the Coordinator Server and monitor the incoming approval requests from your AI agents. You or your team can then approve, modify, or reject these requests.</p>"},{"location":"docs/configuration/","title":"Configuration","text":"<p>Phantasm starts with a sensible default configuration that you can override either by setting environment variables or by passing command-line arguments. This documentation will guide you through the available configuration options.</p>"},{"location":"docs/configuration/#receiver-authentication","title":"Receiver Authentication","text":"<p>Phantasm allows you to configure authentication for the communication between the client and the Receiver Server. Phantasm uses a simple secret key mechanism to authenticate the client, and by default, authentication is disabled.</p> <p>To enable authentication, simply set the <code>PHANTASM_SECRET</code> environment variable to your secret key before starting the server. If you are running Phantasm in a Docker container, this is how you can set the secret key:</p> <pre><code>docker run -e PHANTASM_SECRET=secretkey ...\n</code></pre> <p>When authentication is enabled, you must provide the secret key when initializing the client to ensure that the client can authenticate and communicate with the Receiver Server.</p> Python <pre><code>from phantasmpy import Phantasm\nphantasm = Phantasm(secret=\"secretkey\")\n</code></pre>"},{"location":"docs/configuration/#auto-approval","title":"Auto Approval","text":"<p>There are times when an approver is not available to approve an action call. By default, Phantasm will return an error response with unavailable status code. If you want to automatically approve all actions when no approver is available, you can enable the auto-approval feature by setting the <code>PHANTASM_AUTO_APPROVAL</code> environment variable to true.</p> <pre><code>docker run -e PHANTASM_AUTO_APPROVAL=true ...\n</code></pre> <p>Warning</p> <p>Enabling auto-approval is not recommended for production environments.</p>"},{"location":"docs/reference/","title":"API Reference","text":"<p>Phantasm offers a simple gRPC API for the client to interact with the server, specifically the Receiver Server. There is only one core API method that you need to understand and that is the get approval method.</p>"},{"location":"docs/reference/#getapproval","title":"GetApproval","text":"<p>This is the core method that you will integrate into your AI agent to obtain approval from the approvers before executing a tool. This is a blocking call, so if possible, you may want to run it in a separate thread or process.</p> <p>One of Phantasm's most distinctive features is its ability to pass parameters back and forth. This allows the approvers to review the parameters that the AI agent intends to use and either approve or deny the request based on them. The approvers can also modify the parameters before granting approval.</p> <p>Ideally, the AI agent should use the parameters returned by the approvers as the final parameters for executing the tool, rather than the original parameters. This ensures that the AI agent executes the tool accurately.</p>"},{"location":"docs/reference/#request","title":"Request","text":"<pre><code>message GetApprovalRequest {\n    string name = 1;\n    string parameters = 2;\n    string context = 3;\n}\n</code></pre> <ul> <li>name: Name of the function the AI agent wants to execute.</li> <li>parameters: Parameters to pass to the function.</li> <li>context: Additional context to pass to the approvers.</li> </ul>"},{"location":"docs/reference/#response","title":"Response","text":"<pre><code>message GetApprovalResponse {\n    bool approved = 1;\n    string parameters = 2;\n}\n</code></pre> <ul> <li>approved: Boolean indicating if the request was approved.</li> <li>parameters: Parameters to pass to the function if approved.</li> </ul>"}]}